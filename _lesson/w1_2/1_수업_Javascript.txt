Javascript
: 브라우저에서 돌아가는 언어..


프로그래밍 언어에는 아래의 세 가지로 구성
1. 명령
- 데이터
    숫자, 문자, 객체
- 변수
    하나씩; 변수
    여러개; 리스트
    사전; 딕셔너리

    1) 콘솔 명령 내리기! 숫자
        검사 창 콘솔에 연산시킬 수도 있음
        나머지 구하는 건 %로 할 수 있음: 10 % 3 -> 홀짝 판단 !
    2) 문자: 따옴표로 묶어야 문자임을 인식함
        - 더블: 문장 묶을 때 / 따옴표가 들어간다거나
        - 싱글: 단어. 암거나
        - "문자"+"문자" -> "문자문자" (연결시켜줌)
    3) 변수
        - 변수는 왼쪽. 변수에 값을 대입할 수 있다
            ex. a=10 (O) / 10=a (X)
        - 변수 선언은 let 으로 함
            let으로 선언하지 않아도, a=10 이라고 써도 되지만, 명확하게 하기 위함
            ex. let a = 100; --> 이제부터 a는 100이라고 칩시다
            
    4) 리스트(어레이)
        - [] 로 묶는다
            ex. [1, 2, 3]
        - 리스트도 변수에 담을 수 있다
            ex. a=[1, 2, 3]
        - 리스트에는 숫자, 문자 등 자바스크립트가 취급하는 모든 게 다 들어간다
            ex. a=[123, "dskfj", [234, "sdfsdf"]]
        - 리스트의 인덱스는 0부터 시작한다. 
            ex. a의 두 번째 요소를 부르고자 하면 -> a[1]
                a의 세 번째 요소 안의 첫 번째 요소의 첫 번째 요소를 부르고자 하면 -> a[2][0][0]
        - 리스트의 길이를 재고 싶으면 -> a.length 이면 3이고
        - 리스트의 마지막 값을 가지고 오고 싶으면 -> a[a.length-1] 이면 [234, "sdfsdf"]를 반환
    
    5) 사전(딕셔너리)
        - {"key": "value", "hello":"world"}
        - 키에는 문자, 숫자 들어간다. 밸류 자리는 변수 자리임. 그래서 데이터타입을 정의하지 않으면 에러가 난다. 그래서 직접 값을 넣어야
            ex. {key: value} (X), {key: "value"} (O), {key: a} (O)
                
        - 딕셔너리는 순서가 중요하지 않다(리스트는 순서 중요)
        - 딕셔너리의 밸류에는 어떤 데이터타입도 넣을 수 있다
            ex. a={a:1, b:[10,20,30]}
                a['a'] -> 1
                a['b'] -> [10,20,30]
                a['b'][1] -> 20
            ex. a={a:1, b:[10,20,30],c:{e:1, f:2, z:100}}
                a['c']['f'] -> 2   
                a['c'].e -> 1
                
        * 데이터 찍기: console.log()
2. 반복

for(i=0; i<100; i++){
    console.log("HEllo!");
};

3. 분기

if(a['c'].e == 1){
    console.log("OK");
} else {
    console.log("nono");
};


4. 함수
        74행부터 78행을 get_sum 이라는 함수에 담음

        function get_sum(n) {
            let sum = 0
            for (let i = 0; i < n; i++) {
                sum += i;         // sum을 i만큼 증가시켜라. sum = sum + i 와 동일!
            }
            return sum
        }


        function get_mul(n) {
            let mul = 1
            for (let i = 1; i <= n; i++) {
                mul *= i;         
            }
            return mul
        }

